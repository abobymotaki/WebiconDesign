
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Users can read their own data.
    // - Admins can read any user's data.
    // - Users can create/update their own document.
    // - Admins can create/update any user document (e.g., setting isAdmin or isProvider).
    match /users/{userId} {
      allow read: if request.auth.uid == userId || (request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow create: if request.auth.uid == userId || (request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow update: if request.auth.uid == userId || (request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      // Add delete rule if necessary, e.g., only by admins
      // allow delete: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Talents/Professionals Collection (if you decide to have a separate one)
    // For now, provider data is on the 'users' document with 'isProvider: true'
    // If 'talents' collection is used:
    // match /talents/{talentId} {
    //   allow read: if true; // Publicly readable profiles
    //   allow write: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true; // Only admins manage talents
    // }

    // Contact Submissions Collection
    // - Any authenticated user can create (submit) a contact form.
    // - Authenticated providers can read submissions.
    // - Admins can update/delete submissions (for now).
    match /contactSubmissions/{submissionId} {
      allow create: if request.auth.uid != null;
      allow read: if request.auth.uid != null && 
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isProvider == true ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow update, delete: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      // Future: allow update (e.g. status change) by provider if assigned.
    }

    // Payments Collection
    // - Authenticated users can create their own payment records.
    // - Admins can manage all payment records.
    // - Users might be allowed to read their own payment history.
    match /payments/{paymentId} {
      allow create: if request.auth.uid != null && request.resource.data.email == request.auth.token.email;
      // allow read: if request.auth.uid != null && (request.resource.data.email == request.auth.token.email || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      allow read, update, delete: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Messages and Conversations (Placeholder for future messaging feature)
    // match /conversations/{conversationId} {
    //   allow read, write: if request.auth.uid != null && request.auth.uid in resource.data.participants;
    // }
    // match /conversations/{conversationId}/messages/{messageId} {
    //   allow read, write: if request.auth.uid != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
    // }
  }
}
