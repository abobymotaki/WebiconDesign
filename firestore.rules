
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    // - Authenticated users can read their own document.
    // - Authenticated users can create their own user document upon signup.
    // - Authenticated users can update their own user document (e.g., for profile changes later).
    // - Admins (users with isAdmin:true in their own user document) can read any user document.
    // - For now, admins cannot directly write to other user documents through these rules,
    //   but this could be expanded if admin user management features are added.
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      );
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      // Example for allowing admins to update any user document (use with caution):
      // allow update: if request.auth != null && (
      //   request.auth.uid == userId ||
      //   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      // );
      // Deletion of user documents should typically be handled by backend functions for cleanup.
      allow delete: if false; // Or restrict to admins if needed
    }

    // Talents collection (for the "Find Professionals" page)
    // - Anyone can read talent profiles.
    // - Only admins can create, update, or delete talent profiles.
    match /talents/{talentId} {
      allow read: if true;
      allow write: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // ContactSubmissions collection
    // - Authenticated users can create (submit) contact forms.
    // - Only admins can read, update, or delete contact submissions.
    match /contactSubmissions/{submissionId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null &&
                                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Payments collection
    // - Authenticated users can create payment records that match their authenticated email
    //   (this assumes the email in the payment record is set correctly upon creation from the client).
    // - Only admins can read payment records.
    //   (Consider if users should be able to read their own payment history - rule example commented below).
    match /payments/{paymentId} {
      allow create: if request.auth != null &&
                       request.resource.data.email == request.auth.token.email;
                       // For more robust security, it would be better to pass the request.auth.uid
                       // to your backend /api/create-payment-intent, store it in PaymentIntent metadata,
                       // and then verify that metadata when writing the payment record to Firestore.
                       // E.g., request.resource.data.userId == request.auth.uid;

      allow read: if request.auth != null &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      // To allow users to read their own payments (assuming 'email' field identifies their payments):
      // allow read: if request.auth != null && (
      //   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
      //   (resource.data.email == request.auth.token.email && request.auth.uid == resource.data.userId) // if you store userId
      // );

      // Generally, updates/deletes to payment records should be highly restricted or handled by backend processes.
      allow update, delete: if request.auth != null &&
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
